N = {{program,decllist,declaration,type1,arraydecl,type,stmtlist,
    stmt,simplstmt,assignstmt,expression,term,factor,iostmt,structstmt,
     ifstmt, whilestmt,simplecondition,condition,LogicOPERATOR,relation,
     identifier,letter,digit,const,elseIfBranches,elseBranch,istmt}} ;;
E = {{ + , -, *, /  ,% ,(arithmetic) , < , <=  , >=  ,>  , != ,  =,    &&, || , !  , == ,
     (,), [ ,] ,{, } ,  ; , space,
     char ,int,  string , boolean, array  ,  for, while, if,  else  ,elif ,  of ,program, read, print, 1, 0}} ;;

P = {{ program -> stmtlist ,

decllist -> declaration ; decllist | declaration   ,

declaration -> type identifier  ,

type -> type1 | arraydecl ,

type1 -> int | boolean | string ,

arraydecl -> array ( type1 ) [ const ] ,

stmtlist -> stmt ; | stmt ; stmtlist ,

stmt -> simplstmt | structstmt ,

simplstmt  -> assignstmt | iostmt |  decllist ,

assignstmt  -> identifier = expression | identifier = istmt ,

expression -> term + expression | term - expression | term,

term -> factor * term | factor / term | factor % term | factor ,

factor -> ( expression ) | identifier | const ,

iostmt  -> print ( const ) | print ( identifier ) | istmt ,

istmt -> read ( ) | readInteger() ; ,

structstmt  -> cmpdstmt | ifstmt | whilestmt ,

ifstmt -> if ( condition ) { stmtlist } | if ( condition ) { stmtlist } elseIfBranches ,

elseIfBranches -> elif ( condition ) { stmtlist } | elif ( condition ) { stmtlist } elseIfBranches | elseBranch,

elseBranch -> else { stmtlist } ,

whilestmt  -> while ( condition ) { stmtlist } ,

simplecondition -> expression relation expression ,

condition  -> simplecondition LogicOPERATOR condition | simplecondition ,

LogicOPERATOR -> && | || ,

relation -> < | <= | = | == | != | >= | > ,

identifier -> 1,

const-> 0

}} ;;

S = {{ program }} ;;
