N = {{program,decllist,declaration,type1,arraydecl,type,stmtlist,
    stmt,simplstmt,assignstmt,expression,term,factor,iostmt,structstmt,
     ifstmt, whilestmt,simplecondition,condition,LogicOPERATOR,relation,
     identifier,letter,digit,string}} ;;
E = {{ + , -, *, /  ,% ,(arithmetic) , < , <=  , >=  ,>  , != ,  =,    &&, || , !  , == ,
     (,), [ ,] ,{, } ,  ; , space,
     char ,int,  string , boolean, array  ,  for, while, if,  else  ,elif ,  of ,program, read, print, 1, 0}} ;;

P = {{ program -> stmtlist ,

decllist -> declaration ; decllist | declaration   ,

declaration -> type identifier  ,

type -> int | type1 | arraydecl ,

type1 ->  int | BOOLEAN  |  STRING  |  INTEGER   ,

arraydecl ->  ARRAY   (  type1  )    [  const  ]   ,



stmtlist -> stmt ; | stmt ; stmtlist ,

stmt -> simplstmt | structstmt  ,

simplstmt  -> assignstmt | iostmt |  decllist ,

assignstmt  -> identifier = expression ,

expression -> 0 | 1 | 10,

term  -> term  *  factor | term  /  factor  | factor ,

factor  ->  (  expression  )  | identifier | const  ,

iostmt  -> print ( string ) ; | (  ( READ  |  READINTEGER )  ( )    ; ) |  print ( (identifier | INTEGER | STRING) ) ; ,

structstmt  -> cmpdstmt | ifstmt | whilestmt ,

ifstmt  ->  if ( condition ) { stmt } ,

whilestmt  ->  WHILE   (  condition  )   {  stmt  }  ,

simplecondition -> expression relation expression ,
condition  -> simplecondition LogicOPERATOR simplecondition | simplecondition | simplecondition LogicOPERATOR condition,
LogicOPERATOR -> && | || ,

relation -> < | <= | = | == | != | >= | > ,


 identifier -> 1,

 letterOrDigit -> letter | digit | letterOrDigit | digit letterOrDigit | letter letterOrDigit,

 letter ->  A  |  B  | . ..|  Z  |  a | b  | .. |  z  ,
 digit -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ,

 nonzerodigit ->  1  |...|  9  ,
const-> 0 |  + no | - no | no ,
no-> nonzerodigit { digit },

character -> 'letter' | 'digit',

string -> 0 | stringformat ,
stringformat -> char { stringformat },
char -> letter | digit


    }} ;;

S = {{ program }} ;;
